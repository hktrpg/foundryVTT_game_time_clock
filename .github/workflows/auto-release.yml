name: Auto Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'module.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.version.outputs.version }}
      previous-version: ${{ steps.check.outputs.previous-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Extract current version
      id: version
      run: |
        VERSION=$(node -p "require('./module.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Check if version changed
      id: check
      run: |
        CURRENT_VERSION=$(node -p "require('./module.json').version")
        
        # Get the previous version from git history
        PREVIOUS_VERSION=$(git log --oneline --follow --format=%B -1 HEAD~1 | grep '"version"' | head -1 | sed 's/.*"version": "\([^"]*\)".*/\1/' || echo "0.0.0")
        
        echo "Current version: $CURRENT_VERSION"
        echo "Previous version: $PREVIOUS_VERSION"
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION - will create release"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "ℹ️ Version unchanged ($CURRENT_VERSION) - skipping release"
        fi
        
  release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        
    - name: Extract version and compatibility
      id: module-info
      run: |
        VERSION=$(node -p "require('./module.json').version")
        COMPAT=$(node -p "JSON.stringify(require('./module.json').compatibility)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "compatibility=$COMPAT" >> $GITHUB_OUTPUT
        echo "Module version: $VERSION"
        
    - name: Validate module.json
      run: |
        node -e "
          const module = require('./module.json');
          const required = ['id', 'title', 'description', 'version', 'compatibility'];
          const missing = required.filter(field => !module[field]);
          if (missing.length > 0) {
            console.error('Missing required fields:', missing);
            process.exit(1);
          }
          console.log('✅ module.json validation passed');
        "
        
    - name: Create release package
      run: |
        # Create a temporary directory for packaging
        mkdir -p temp_package
        
        # Copy all necessary files
        cp module.json temp_package/
        cp index.js temp_package/
        cp README.md temp_package/
        cp LICENSE temp_package/
        
        # Copy language files
        cp -r langs temp_package/
        
        # Create the zip file
        cd temp_package
        zip -r "../game_time_clock-v${{ steps.module-info.outputs.version }}.zip" .
        cd ..
        
        echo "Package created: game_time_clock-v${{ steps.module-info.outputs.version }}.zip"
        
    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.module-info.outputs.version }}" -m "Release v${{ steps.module-info.outputs.version }}"
        git push origin "v${{ steps.module-info.outputs.version }}"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: game_time_clock-v${{ steps.module-info.outputs.version }}.zip
        name: Auto Release v${{ steps.module-info.outputs.version }}
        body: |
          ## Game Time Clock v${{ steps.module-info.outputs.version }}
          
          🤖 **Automatically generated release**
          
          ### Changes
          - Version updated from ${{ needs.check-version.outputs.previous-version }} to ${{ steps.module-info.outputs.version }}
          - See commit history for detailed changes
          
          ### Installation
          1. Download the module.zip file
          2. Extract to your FoundryVTT modules directory
          3. Enable the module in your world settings
          
          ### Compatibility
          - FoundryVTT: ${{ fromJSON(steps.module-info.outputs.compatibility).minimum }}+
          - Verified: ${{ fromJSON(steps.module-info.outputs.compatibility).verified }}
          
          ### Auto Release Info
          This release was automatically generated when the version in `module.json` was updated.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update manifest URLs
      run: |
        # Update the manifest URL to point to the new release
        sed -i "s|https://raw.githubusercontent.com/hktrpg/foundryVTT_game_time_clock/master/module.json|https://raw.githubusercontent.com/hktrpg/foundryVTT_game_time_clock/v${{ steps.module-info.outputs.version }}/module.json|g" module.json
        
        # Update the download URL
        sed -i "s|https://github.com/hktrpg/foundryVTT_game_time_clock/releases/latest/download/module.zip|https://github.com/hktrpg/foundryVTT_game_time_clock/releases/download/v${{ steps.module-info.outputs.version }}/game_time_clock-v${{ steps.module-info.outputs.version }}.zip|g" module.json
        
        echo "Updated manifest URLs for version ${{ steps.module-info.outputs.version }}"
        
    - name: Commit updated module.json
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add module.json
        git commit -m "Update manifest URLs for v${{ steps.module-info.outputs.version }} [skip ci]"
        git push
        
    - name: Notify success
      run: |
        echo "🎉 Auto release completed successfully!"
        echo "Version: ${{ steps.module-info.outputs.version }}"
        echo "Package: game_time_clock-v${{ steps.module-info.outputs.version }}.zip"
        echo "Tag: v${{ steps.module-info.outputs.version }}"
